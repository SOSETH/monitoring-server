{% if item not in groups['mon-server'] %}
{% set zonename=hostvars[item]['ansible_fqdn'] %}
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * Zone {{ hostvars[item]['ansible_fqdn'] }} * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
object Zone "{{ hostvars[item]['ansible_fqdn'] }}" {
        endpoints = [ "{{ hostvars[item]['ansible_fqdn'] }}" ]
        parent = "master"
}

object Endpoint "{{ hostvars[item]['ansible_fqdn'] }}" {
}
{% else %}
{% set zonename="master" %}
{% endif %}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * Host {{ hostvars[item]['ansible_fqdn'] }} * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
{% if item != ansible_fqdn %}
object Host "{{ hostvars[item]['ansible_fqdn'] }}" {
  import "satellite-host"
  check_command = "cluster-zone"

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
  {% if hostvars[item]['ansible_default_ipv6'] %}
  {% if hostvars[item]['ansible_default_ipv6']['address'].startswith('2001') %}
  address6 = "{{ hostvars[item]['ansible_default_ipv6']['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }

  {% if 'is_client' in hostvars[item] %}
  vars.is_client = true
  {% endif %}
}

/* * * * * * * * * * * * * Services * * * * * * * * * * * * * * * * * */
{% for item2 in hostvars[item]['ansible_local']['icinga_checks'] %}
{% if (item2|match('ups.*')) %}
object Service "ups status" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = true
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups battery" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups temp" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = true
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups load" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups
  vars.datitem = "local"
}
object Service "ups time" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups"
  vars.datitem = "local"
}
{% else %}
{% if (item2|match('http .*')) %}
object Service "http {{ item }}" {
{% elif (item2|match('https .*')) %}
object Service "https {{ item }}" {
{% else %}
object Service "{{ item2 }}" {
{% endif %}
        import "satellite-service"
        check_command = "dummy"
{% if (item2|match('ipmi .*')) %}
        host_name = "{{ item2|regex_replace('^ipmi (.*)$', '\\1') }}"
        vars.datgroup = "ipmi"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('http .*')) %}
        host_name = "{{ item2|regex_replace('^http (.*)$', '\\1') }}"
        vars.datgroup = "http"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('https .*')) %}
        host_name = "{{ item2|regex_replace('^https (.*)$', '\\1') }}"
        vars.datgroup = "http"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('power .*')) %}
        host_name = "{{ item2|regex_replace('^power (.*)$', '\\1') }}"
        vars.datgroup = "power"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('infiniband .*')) %}
        host_name = "{{ item2|regex_replace('^infiniband (.*)$', '\\1') }}"
        vars.datgroup = "infiniband"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif item2 == 'raid' %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "raid"
        vars.datitem = "local"
{% else %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "{{item2|regex_replace('^([a-zA-Z0-9\.\-]+) .*$', '\\1')}}"
        /* vars.datitem = "{{item2|regex_replace('^([a-zA-Z0-9\.\-]+) (.*)$', '\\2')}}" */
        vars.datitem = "local"
{% endif %}

{% if (item2|match('apt')) %}
    {% if 'apt_enabled' in hostvars[item] %}
        vars.notify = true
    {% else %}
        vars.notify = false
    {% endif %}
{% else %}
        vars.notify = true
{% endif %}
        zone = "{{ zonename }}"
}
{% endif %}
{% endfor %}

{% for item2 in hostvars[item]['ansible_local']['icinga_checks'] %}
{% if (item2|match('power .*')) %}

/* * * * * * * * * * * * * VHost * * * * * * * * * * * * * * * * * */
object Host "{{ item2|regex_replace('^power (.*)$', '\\1') }}" {
  check_command = "dummy"
  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
  
  vars.notify = true
}
{% endif %}
{% endfor %}

{% set websites_found = [] %}
{% for item2 in hostvars[item]['ansible_local']['icinga_checks'] %}
{% if (item2|match('http .*')) %}
{% set item_name=item2|regex_replace('^http (.*)$', '\\1') %}
{% if item_name not in websites_found %}
/* * * * * * * * * * * * * VHost * * * * * * * * * * * * * * * * * */
{% if item_name not in groups['mon-client'] %}
{% if item_name not in groups['mon-server'] %}
object Host "{{ item_name }}" {
  check_command = "dummy"
  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
  
  vars.notify = true
}
{% endif %}
{% endif %}
{% set websites_found = websites_found|join(item_name) %}
{% endif %}
{% endif %}
{% endfor %}

{% endif %}
