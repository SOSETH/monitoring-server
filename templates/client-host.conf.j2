{% if item not in groups['mon-server'] %}
{# This is not a server -> we need a zone #}
{% set zonename=hostvars[item]['ansible_fqdn'] %}
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * Zone {{ hostvars[item]['ansible_fqdn'] }} * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
object Zone "{{ hostvars[item]['ansible_fqdn'] }}" {
        endpoints = [ "{{ hostvars[item]['ansible_fqdn'] }}" ]
        parent = "master"
}

object Endpoint "{{ hostvars[item]['ansible_fqdn'] }}" {
        host = "{{ hostvars[item]['ansible_fqdn'] }}"
}
{% else %}
{% set zonename="master" %}
{% endif %}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * Host {{ hostvars[item]['ansible_fqdn'] }} * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
{% if item != ansible_fqdn %}
object Host "{{ hostvars[item]['ansible_fqdn'] }}" {
  import "satellite-host"
  check_command = "cluster-zone"

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
  {% if hostvars[item]['ansible_default_ipv6'] %}
  {% if hostvars[item]['ansible_default_ipv6']['address'].startswith('2001') %}
  {# Ansible sometimes thinks of link-local IPv6 address as globally reachable
     addresses. Filter that case. If you know a better way, feel free to fix #}
  address6 = "{{ hostvars[item]['ansible_default_ipv6']['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }

  {% if 'mon_is_client' in hostvars[item] %}
  {# Is this host a client? A client does not generate warnings if it becomes
     unreachable #}
  vars.is_client = {{ hostvars[item]['mon_is_client'] }}
  {% endif %}
}
{% endif %}

{#
{% if item != ansible_fqdn %}
/* * * * * * * * * * * * * Services * * * * * * * * * * * * * * * * * */
{% for item2 in hostvars[item]['ansible_local']['mon_icinga_checks'] %}

{% if (item2|match('ups.*')) %}
object Service "ups status" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = true
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups battery" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups temp" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = true
  vars.datgroup = "ups"
  vars.datitem = "local"
}
object Service "ups load" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups
  vars.datitem = "local"
}
object Service "ups time" {
  import "satellite-service"
  check_command = "dummy"
  host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
  zone = "{{ zonename }}"
  vars.notify = false
  vars.datgroup = "ups"
  vars.datitem = "local"
}
{% else %}

{% if (item2|match('http .*')) %}
object Service "http {{ item }}" {
{% elif (item2|match('https .*')) %}
object Service "https {{ item }}" {
{% else %}
object Service "{{ item2 }}" {
{% endif %}
        import "satellite-service"
        check_command = "dummy"
{% if (item2|match('ipmi .*')) %}
        host_name = "{{ item2|regex_replace('^ipmi (.*)$', '\\1') }}"
        vars.datgroup = "ipmi"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('http .*')) %}
        host_name = "{{ item2|regex_replace('^http (.*)$', '\\1') }}"
        vars.datgroup = "http"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('https .*')) %}
        host_name = "{{ item2|regex_replace('^https (.*)$', '\\1') }}"
        vars.datgroup = "http"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('power .*')) %}
        host_name = "{{ item2|regex_replace('^power (.*)$', '\\1') }}"
        vars.datgroup = "power"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif (item2|match('infiniband .*')) %}
        host_name = "{{ item2|regex_replace('^infiniband (.*)$', '\\1') }}"
        vars.datgroup = "infiniband"
        vars.datitem = "{{hostvars[item]['ansible_fqdn']}}"
{% elif item2 == 'raid' %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "raid"
        vars.datitem = "local"
{% elif (item2|match('iostat .*')) %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "iostat"
        vars.datitem = "{{item2|regex_replace('^([a-zA-Z0-9\.\-]+) (.*)$', '/dev/\\2')}}"
	vars.notify = false
{% elif (item2|match('sas .*')) %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "sas"
        vars.datitem = "{{item2|regex_replace('^sas (.*)$', '\\1')}}"
	vars.notify = false
{% elif (item2|match('smart .*')) %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "smart"
        vars.datitem = "{{item2|regex_replace('^smart (.*)$', '\\1')}}"
	vars.notify = false
{% else %}
        host_name = "{{ hostvars[item]['ansible_fqdn'] }}"
        vars.datgroup = "{{item2|regex_replace('^([a-zA-Z0-9\.\-]+) .*$', '\\1')}}"
        vars.datitem = "local"
{% endif %}

{% if (item2|match('apt')) %}
    {% if 'mon_apt_enabled' in hostvars[item] %}
        vars.notify = hostvars[item]['mon_apt_enabled']
    {% else %}
        vars.notify = false
    {% endif %}
{% else %}
        vars.notify = true
{% endif %}
        zone = "{{ zonename }}"
}
{% endif %}
{% endfor %}
{% endif %}

/* Known hosts until this point: {{ icinga_hosts_found }} */

{% for item2 in hostvars[item]['ansible_local']['mon_icinga_checks'] %}
{% if (item2|match('power .*')) and (item2|regex_replace('^power (.*)$', '\\1') not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn)) %}
/* * * * * * * * * * * * * VHost * * * * * * * * * * * * * * * * * */
object Host "{{ item2|regex_replace('^power (.*)$', '\\1') }}" {
  check_command = "dummy"
  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
  
  vars.notify = true
}
{% endif %}

{% if (item2|match('infiniband .*')) and (item2|regex_replace('^infiniband (.*)$', '\\1') not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn)) %}
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * Host {{ item2|regex_replace('^infiniband (.*)$', '\\1') }} * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
object Host "{{ item2|regex_replace('^infiniband (.*)$', '\\1') }}" {
  check_command = "dummy"
  /* IB does not really have an IP per se ;)

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`.
   * vars.os = "Linux" */

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
}
{% endif %}

{% if (item2|match('http .*')) %}
{% set item_name=item2|regex_replace('^http (.*)$', '\\1') %}
/* * * * * * * * * * * * * VHost * * * * * * * * * * * * * * * * * */
{% if item_name not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn) %}
{% set icinga_hosts_found=icinga_hosts_found|append(item_name, 'icinga_hosts_found'+ansible_fqdn) %}
object Host "{{ item_name }}" {
  check_command = "dummy"
  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
  
  vars.notify = true
}
{% endif %}
{% endif %} 

{% endfor %}
#}
