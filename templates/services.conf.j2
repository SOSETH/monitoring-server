/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

template Service "normal-service" {
  import "generic-service"
  vars.datitem = "local"
  vars.notify = true
  check_interval = 60s
  check_period = "24x7"
}

apply Service "disk " for (disk => config in host.vars.disk) {
  import "normal-service"
  check_command = "disk"

  vars += config
  vars.datgroup = "disk"
}

apply Service "iostat " for (iostat => config in host.vars.iostat) {
  import "normal-service"
  check_command = "iostat"

  vars += config
  vars.datgroup = "iostat"
}

apply Service "smart " for (smart => config in host.vars.sata) {
  import "normal-service"
  check_command = "smartSOS"

  vars += config
  vars.datgroup = "smart"
  vars.datitem = vars.device
}

apply Service "sas " for (sas => config in host.vars.sas) {
  import "normal-service"
  check_command = "sasSOS"

  vars += config
  vars.datgroup = "smart"
  vars.datitem = vars.device
}

apply Service "sensor " for (sensor => config in host.vars.sensor) {
  import "normal-service"
  check_command = "sensor"

  vars += config
  vars.datgroup = "sensor"
}

apply Service "raid" {
  import "normal-service"
  check_command = "raid"
  assign where host.vars.raid
  vars.datgroup = "raid"
}

apply Service "ceph" {
  import "normal-service"
  check_command = "ceph"
  check_interval = 30s
  assign where host.vars.ceph
  vars.datgroup = "ceph"
  vars.datitem = host.name
}

apply Service "ipmi " for (ipmi => config in host.vars.ipmi) {
  import "normal-service"
  check_command = "ipmi"

  vars += config
  vars.datgroup = "ipmi"
  vars.datitem = ipmi
}

apply Service "https " for (https => config in host.vars.https) {
  import "normal-service"
  check_command = "http"

  vars += config
  vars.datgroup = "http"
  vars.datitem = https
}

apply Service "http " for (http => config in host.vars.http) {
  import "normal-service"
  check_command = "http"

  vars += config
  vars.datgroup = "http"
  vars.datitem = http
}

apply Service "power " for (power => config in host.vars.power) {
  import "normal-service"
  check_command = "power"

  vars += config
  vars.datgroup = "power"
  vars.datitem = power
}

apply Service "infiniband " for (infiniband => config in host.vars.ib) {
  import "normal-service"
  check_command = "ib-host"
  check_interval = 20s

  vars += config
  vars.datgroup = "ib"
  vars.datitem = infiniband
}

apply Service "infiniband-net " for (ibnet => config in host.vars.ib-net) {
  import "normal-service"
  check_command = "ib-net"

  vars += config
  vars.datgroup = "ib-net"
  vars.datitem = ibnet
}

apply Service "icinga" {
  import "normal-service"
  check_command = "icinga"
  assign where host.vars.os == "Linux"
  vars.datgroup = "icinga"
}

apply Service "procs" for (procs => config in hosts.vars.procs) {
  import "normal-service"
  check_command = "procs"
  vars += config
  vars.datgroup = "procs"
}

apply Service "users" {
  import "normal-service"
  check_command = "users"
  assign where host.vars.os == "Linux"
  vars.datgroup = "users"
}

apply Service "mem" {
  import "normal-service"
  assign where host.vars.os == "Linux"
  check_command = "mem"
  vars.datgroup = "mem"
  vars.mem_used = true
  vars.mem_cache = true
  vars.mem_warning = 80
  vars.mem_critical = 95
}

apply Service "load" for (load => config in hosts.vars.load) {
  import "normal-service"
  check_command = "load"
  vars += config
  vars.datgroup = "load"
}

apply Service "apt" for (apt => config in hosts.vars.apt) {
  import "normal-service"
  check_command = "apt"
  vars += config
  vars.datgroup = "apt"
}

apply Service "swport " for (swport => config in hosts.vars.snmpif) {
  import "normal-service"
  check_command = "snmpif"
  vars += config
  vars.datgroup = "snmpif"
}

apply Service "ups status" {
  import "normal-service"
  check_command = "apcupsd"
  assign where host.vars.ups
  vars.warning = "0"
  vars.crit = "1"
  vars.check = "status"
  vars.datgroup = "ups"
}

apply Service "ups battery" {
  import "normal-service"
  check_command = "apcupsd"
  assign where host.vars.ups
  vars.warning = "80"
  vars.crit = "50"
  vars.check = "bcharge"
  vars.datgroup = "ups"
}

apply Service "ups temp" {
  import "normal-service"
  check_command = "apcupsd"
  assign where host.vars.ups
  vars.warning = "50"
  vars.crit = "60"
  vars.check = "itemp"
  vars.datgroup = "ups"
}

apply Service "ups load" {
  import "normal-service"
  check_command = "apcupsd"
  assign where host.vars.ups
  vars.warning = "70"
  vars.crit = "90"
  vars.check = "loadpct"
  vars.datgroup = "ups"
}
